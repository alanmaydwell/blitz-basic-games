;zobulise test

;go into graphics mode
Graphics 640,480
Global width=GraphicsWidth()
Global height=GraphicsHeight()
Global width1=width-1
Global height1=height-1
Global midx=width/2
Global midy=height/2
;Sets some horizontal coordinates and stores in H(n)
steps#=20
Dim H(steps#)
For loop#=1.00 To steps#
H(loop#)=(loop#/steps#)*width
Next
;Sets some vertical coordinates and stores in V(n)
steps#=20
Dim V(steps#)
For loop#=1.00 To steps#
V(loop#)=(loop#/steps#)*height
Next


Global rots=72 ;number of orientations for ship and objects
Global invert=rots/2
Global rightangle=rots/4

;enable double buffering
SetBuffer BackBuffer()


AutoMidHandle True 

;Load graphics
Global im_bull1=LoadImage("data\bull.bmp")
Global im_bull2=LoadImage("data\bull2.bmp")
Global im_bem1=LoadAnimImage("data\diathing_ani.bmp",32,32,0,8)
Global im_bem2=LoadAnimImage("data\redcross1_ani.bmp",32,32,0,8)
Global im_bem3=LoadAnimImage("data\greenie_ani.bmp",32,32,0,8)
Global im_bem 
Global im_pod=LoadImage("data\redsq.bmp")
Global im_liz=LoadImage("data\redcro.bmp")
Global im_ship=LoadImage("data\ship.bmp")

;Load sounds
Global sn_exp=LoadSound("data\Arilou-Warp.wav")
Global sn_bip=LoadSound("data\ZoqFot-Bullet.wav")
Global sn_reb=LoadSound("data\ENV9091.wav")
Global sn_las=LoadSound("data\Laser01.mp3")
Global sn_mat=LoadSound("data\Yehat-Shield.wav")
Global sn_pod=LoadSound("data\Chenjesu-Dogi.wav")
Global sn_sxp=LoadSound("data\Utwig-fire.wav")

Global chn_mus; Background music "channel"



;Load fonts
Global fnt_txt=LoadFont("data\FUTURE.TTF",22,False,False,False)
Global fnt_sm=LoadFont("data\FUTURE.TTF",12,False,False,False)
SetFont fnt_txt



;##################
;# Ship Parameters#
;##################
Global player_x#	;x coord
Global player_y#	;y coord
Global player_s#=0	;speed
Global player_dx# ;x velocity
Global player_dy# ;y velocity
Global player_o	;orientation
Global player_e ;energy
Global player_status=1 ; status 1=alive, 0=dead but explosion not yet started, -1 dead but explosion underway, 2 alive and temporarily indistructible
Global control=0;AP is able to control motion of ship if this value is zero.

;width and height of ship image
Global shipwidth=ImageWidth(im_ship)
Global shipheight=ImageHeight(im_ship)

;x and y boundaries for ship movement
Global shipxmax=width-(shipwidth/2)
Global shipxmin=shipwidth/2
Global shipymax=height-(shipheight/2)
Global shipymin=shipheight/2

Dim playership(rots) ;stores ship images in different orientations
Dim trig#(rots,1) ;Stores Sin and Cos look-up table.

;#######################################
;#Egg pod and hatched chaser parameters#
;#######################################
Type egg
Field x,y
Field dx,dy
Field status
Field targ ;Target: -2=none, -1=player, Whole number=array index of bem
End Type
Global et=0; "Egg timer" time quantisation interval for homing things 
Global maxpods=64; Sets maximum number of pods that can be used in each game (sets size of array). (Number of pods in each level is recorded in npods).
Dim pod.egg(maxpods); 

;Pod animated image parameters and creation
Global pn=12				;number of frames in animation (counting from 1, although when plotting count runs from 0 to n-1)
Global frame#=width/32	;width of each frame (based on screen width)
Global im_circs=CreateImage(frame#,frame#,pn); The images are stored here
Global pframe=0; current frame number in pod animation


;width and height of pod image
Global podwidth=frame#
Global podheight=frame#

;x and y boundaries for pod/chaser movement
Global podxmax=width-(podwidth/2)
Global podxmin=podwidth/2
Global podymax=height-(podheight/2)
Global podymin=podheight/2

;Generates the animated image
make_pod_image()

;Chaser animated image parameters and set up
Global nw=8 ; number of animation frames for chaser (nw= number of wiggles)
Global im_home1=CreateImage(frame#,frame#,nw+1)
Global im_home2=CreateImage(frame#,frame#,nw+1)
Global cframe=0; frame in chaser animation
 
make_chaser_image() 

Color 255,255,255

 
;##################
;# BEM Parameters #
;##################
Type fly
Field x,y
Field dx,dy
Field t; timer (when timer reaches 0 then bem changes direction)
Field tp; type of bem (0 indicates dead)
Field sp; per 1000 probability of shooting per screen update
End Type

Global bem_sp=3;Global value for the sp field above (Have left as individual field so different probabilities could be set later)

;Stores dimensions of BEM
Global bemwidth=ImageWidth(im_bem2)
Global bemheight=ImageHeight(im_bem2)
;x and y boundaries for BEM movement
Global bemxmax=width-(bemwidth/2)
Global bemxmin=bemwidth/2
Global bemymax=height-(bemheight/2)
Global bemymin=bemheight/2
Global maxbem=32 
Global bframe=0; animation frame for bems

Dim bem.fly(maxbem)

;bullet type
Type bullet
Field x,y
Field dx#,dy#
Field life#
Field fw; from whom (1=ship,2=baddie)
End Type

;Explosiong thing type 
Type zob
Field count; Stores number of loops shape has expanded for. 
Field max ; sets maximum number of loops
Field col ;colour
Field x1,y1;Coordinates of the four corners
Field x2,y2
Field x3,y3
Field x4,y4
Field dx,dy;velocity of corners
End Type


;###################
;# Game Parameters #
;###################
Global startlives=3; start number of lives
Global lives       ;current number of lives
Global startlevel=1; Start level
Global level=1     ;Current level   
Global score=0
Global bemcount=1 ;Tracks number of alive BEMS
Global pbcount=0  ;Tracks number of player bullets
Global pbmax=4	  ;Maximum numbe of player bullets 
Global npods=12    ;Number of pods. Cannot exceed value of maxpods
Global nbem=1     ;Number of BEMS. Cannot exceed value of maxbem
Global loopcount=0; Program loopcounter
Global frame_advance=0; Triger for advancing animation frames
Global countdown; Countdown for action after player killed
Global slowdown=0; Gamespeed reduction factor

;Check size of zone
;Line xmin,ymin,xmax,ymin
;Color 255,0,0
;Line xmin,ymax,xmax,ymax
;WaitKey

;High Score Table Settings
Global ns=8; 	Number of entries (-1) to be stored in the High Score Table. 
Dim hst(ns);	stores scores
Dim hsnames$(ns);Stores names

;Set higscore table with dummy values and zero scores
sethighscore(ns)


;Set up various things
rotate()			; Precalculates the ship rotation and creates sin/cos l.u.t.

Repeat ;Beginning of main loop
greet

	Repeat ;Start of game in progress (new level)
	set_pods(npods) 	;Set up eggs
	set_bem				; Set up bems
	bemcount=nbem+1
	set_ship(midx,midy) ; Set up ship

	materialise() ; materialise in the level start

	
	;loop until ESC hit...
	
		Repeat; Start of level in progress
		Cls
		update_bem()

		If player_status=0 Then
		lives=lives-1
		For l=1 To 40 Step 4
		bang(player_x,player_y,0,1,1,100,-l,1)
		PlaySound sn_sxp
		Next
		player_x#=-100;move off edge of screen
		player_status=-1; Awaiting rebirth
		countdown=150
		End If 

		;Draw ship and allow controlls if player is alive
		;Decriment countdown if player dead
		If player_status=1 Then 
		update_ship
		controlship
		Else countdown=countdown-1 
		End If 

		update_bullets
		update_pods
		plotsqr()
		update_display()
		
		Delay slowdown
		
		Flip 

		loopcount=loopcount+1
		If loopcount= 255 Then loopcount=0
		If loopcount Mod(4)=0 Then frame_advance=True Else frame_advance=False
		If (player_status=-1 And countdown=0) Then player_status=1:set_ship(midx,midy)
		
		Until KeyDown(1) Or bemcount=0 Or (lives=0 And countdown=0);End of level in progress loop
 	If lives>0 Then
	level_end()
	level=level+1
	End If 
	Until KeyDown(1) Or lives=0;End of game in progress loop
game_over() 	
clearup 
Until KeyDown(1); End of main loop
End 

;############################
;### Functions Start Here ###
;############################


;Sets player ship initial conditions
Function set_ship(x,y)
player_x#=x
player_y#=y
player_dx#=0
player_dy#=0
player_o=0
player_s#=0
End Function

;Stearing and accelleration controls for ship
Function controlship()

;If z or joystick pressed pressed rotate the ship anticlockwise
If KeyDown(45) Or JoyXDir()=1 Then player_o=(player_o+1) Mod(rots)


;If x pressed or joystick used rotate the ship clockwise
If KeyDown(44) Or JoyXDir()=-1 Then
player_o=player_o-1
If player_o=-1 Then player_o=rots-1
End If

;if r-shift pressed then accelerate ship
If KeyDown(54) Or JoyYDir()=-1 Then If player_s#<5 player_s#=player_s#+0.50

;Create bullet if firebutton pressed and maximum number of bullets not reached
If (KeyHit(28) Or  GetJoy()>0) And pbcount<pbmax Then
PlaySound sn_las
pb.bullet=New bullet
pb\x=player_x
pb\y=player_y
pb\dx#=player_dx#+6*trig#(player_o,0)
pb\dy#=player_dy#-6*trig#(player_o,1)
pb\life#=width
pb\fw=1
End If


;Auto slowdown
If player_s#>=0.15 Then player_s#=player_s#-0.15

;If player able to control motion ship (control=0) then 
;Update x and y components of velocity based on new orientation and speed
If control=0 Then 
player_dx#=player_s#*trig#(player_o,0) 
player_dy#=-player_s#*trig#(player_o,1)
Else control=control -1
End If 

End Function

Function update_ship()

;Plot the ship
DrawImage playership(player_o),player_x#,player_y#

;Update ship position
player_x#=player_x#+player_dx#
player_y#=player_y#+player_dy#

;Stops ship from leaving edge of screen
;Blocks top-edge
If player_y#<shipymin Then 
player_y#=shipymin
newori=invert-player_o
If newori<0 Then newori=rots+newori
player_o=newori
PlaySound sn_reb
End If 
;Blocks botton edge
If player_y#>shipymax Then
player_y#=shipymax
newori=invert-player_o
If newori<0 Then newori=rots+newori
player_o=newori
PlaySound sn_reb
End If 
;Blocks left-edge
If player_x#<shipxmin Then 
player_x#=shipxmin
newori=rots-player_o
player_o=newori
PlaySound sn_reb
End If
;blocks right-edge
If player_x#>shipxmax Then 
player_x#=shipxmax
newori=rots-player_o
player_o=newori
PlaySound sn_reb
End If 

End Function 

;Updates bullets
Function update_bullets()
pbcount=0
For pb.bullet = Each bullet
If pb\fw=1 DrawImage im_bull1,pb\x,pb\y:pbcount=pbcount+1
If pb\fw=2 DrawImage im_bull2,pb\x,pb\y

;Collision detection between player and bullets
If ImagesCollide(im_bull1,pb\x,pb\y,0,playership(player_o),player_x#,player_y#,0)Then
	If pb\fw=1 And pb\life<600 Then pb\dx#=-pb\dx#:pb\dy#=-pb\dy#
	If pb\fw=2 Then player_status=0:pb\life#=0
End If 

pb\x=pb\x+pb\dx#
pb\y=pb\y+pb\dy#
pb\life#=pb\life#-(Sqr(pb\dx#^2+pb\dy#^2))

;confine bullets to screen
If pb\x<0 Then pb\x=0:pb\dx#=-pb\dx#
If pb\y<0 Then pb\y=0:pb\dy#=-pb\dy#
If pb\x>width Then pb\x=width:pb\dx#=-pb\dx#
If pb\y>height Then pb\y=height:pb\dy#=-pb\dy#
If pb\life#<=0 Then Delete pb
Next
End Function 

Function make_pod_image()
;generates the concentric circle animation for pods
rad#=frame#/2	 ;maximum radius of circle in each frame
dec#=frame/pn    ;decriment for making circles of smaller radius
loop=1
Repeat
SetBuffer ImageBuffer(im_circs,loop-1) 
Color 0,155,255
Oval 0,0,frame,frame,0
Color 0,0,255
k=loop-1
j=frame#-(loop*dec#)
Oval rad-j/2,rad-j/2,j,j,0
loop=loop+1
Until loop>pn
SetBuffer BackBuffer()
End Function 

Function make_chaser_image()
loop=0
pmax=720
peek=frame#/10

;Make animation frames for chaser
Repeat

p=0
	Repeat
	;Create diagonal line with superimposed sin wave with aplitude varying from frame to fram.
	;Two versions created, one the mirror image of the other
	If loop<nw/2 Then amp=loop*peek Else amp=(nw-loop)*peek 
	
	x=(p*frame#/pmax)+Sin(p*2)*amp
	y=p*frame#/pmax
	SetBuffer ImageBuffer(im_home1,loop)
	Plot x,y
	SetBuffer ImageBuffer(im_home2,loop)
	Plot frame#-x,y
	Color 0,255,50+Rnd(205)
	p=p+1
	Until p>pmax
loop=loop+1
Until loop>nw Or KeyDown(1)
SetBuffer BackBuffer()
End Function 

Function set_pods(n)
For i=0 To n
pod.egg(i)=New egg

;Chooses random location but outside excluded area
Repeat 
pod(i)\x=Rnd(H(3),H(17))
pod(i)\y=Rnd(V(3),V(17))
Until pod(i)\x>H(11) Or pod(i)\x<H(9) Or pod(i)\y>V(11) Or pod(i)\y<V(9)

pod(i)\dx=0
pod(i)\dy=0
pod(i)\status=1
pod(i)\targ=-1
Next; (i)

;checks that pods do not overlap
Repeat 
Local ok=True; Flag wether any pod overlaps with another
For i=0 To  n
For j=i To npods
;If collision found set ok to false and set targ to -2
If j<>i And ImagesCollide(im_circs,pod(i)\x,pod(i)\y,0,im_circs,pod(j)\x,pod(j)\y,0) Then
ok=False 
pod(i)\targ=-2
End If 
Next;(j)
Next;(i)

If ok=False; If overlapping pods found then move targetted pods to new locations
For i=0 To n
	If pod(i)\targ=-2 Then
	pod(i)\targ=-1
	Repeat
	pod(i)\x=Rnd(H(3),H(17))
	pod(i)\y=Rnd(V(3),V(17))
	Until pod(i)\x>H(11) Or pod(i)\x<H(9) Or pod(i)\y>V(11) Or pod(i)\y<V(9)
	End If 
Next; (i)
End If 
Until ok=True; Recheck if any pod moved

End Function

Function update_pods()
;update animation frame for pod and chaser
If frame_advance=True Then 
pframe=pframe+1 :If pframe=pn Then pframe=0 
cframe=cframe+1 If cframe>nw Then cframe=0
End If 

For i=0 To npods

;If in homing mode then home in on target, else don't

et=et-1:If et<0 Then et=30; Countdown timer for direction update for chasers

If pod(i)\status=-1 Then

	;Display the chaser image based on direction it is moving.
	If pod(i)\dx=pod(i)\dy Then 
	DrawImage im_home1,pod(i)\x,pod(i)\y,cframe
	Else DrawImage im_home2,pod(i)\x,pod(i)\y,cframe
	End If 

	If et=0 Then; Change direction timer (et) reaches 0 then update direction 
	If pod(i)\targ=-1 Then ;(Home in on player)
	pod(i)\dx=homein(pod(i)\x,player_x#)
	pod(i)\dy=homein(pod(i)\y,player_y#)
	If player_status<>1 Then pod(i)\status=1; If player is killed then stop chasing
	Else 
	j=pod(i)\targ    ;(Home in on BEM)
	pod(i)\dx=homein(pod(i)\x,bem(j)\x)
	pod(i)\dy=homein(pod(i)\y,bem(j)\y)
	If bem(j)\tp=0 Then pod(i)\status=1; If someome killed the target then change back to egg
	End If 
    End If 

Else DrawImage im_circs,pod(i)\x,pod(i)\y,pframe
End If 

;Text pod(i)\x,pod(i)\y,pod(i)\targ

;Stops pods from leaving edge of screen
pod(i)\dx=confine(pod(i)\x,pod(i)\dx,podxmin,podxmax)
pod(i)\dy=confine(pod(i)\y,pod(i)\dy,podymin,podymax)

;Update location 
pod(i)\x=pod(i)\x+pod(i)\dx
pod(i)\y=pod(i)\y+pod(i)\dy


;collision detection between pod and ship
If ImagesCollide(im_circs,pod(i)\x,pod(i)\y,0,playership(player_o),player_x#,player_y#,0)Then 


	If pod(i)\status=1 Then 
	a1=pod(i)\dx
	a2=player_dx#
	b1=pod(i)\dy
	b2=player_dy#
	player_dx#=a1
	pod(i)\dx=a2
	player_dy#=b1
	pod(i)\dy=b2
	player_x#=player_x#+player_dx#
	player_y#=player_y#+player_dy#
	control=30; Prevents player from being able to change ship's velocity for a number of loops.
	PlaySound sn_reb
	
	Else ;(If pod is a chaser (-1))
	player_status=0		;Kill ship
	pod(i)\status=1	;Turn back to egg
	End If 

End If 

;collision detection between pod And bullet

	For pb.bullet = Each bullet
	If ImagesCollide(im_circs,pod(i)\x,pod(i)\y,0,im_bull1,pb\x,pb\y,0) Then
	
		If pb\fw=1 Then 
		pb\life=0; Delete bullet
		pod(i)\status=-pod(i)\status; Chage status of pod
		PlaySound sn_pod
		End If 
	
		If pb\fw=2 Then
			 ;BEM bullets can only change chaser into pod but not visa versa.
			If pod(i)\status=-1 Then 
			pod(i)\status=1
			PlaySound sn_pod
			Else 
			pb\dx=-pb\dx:pb\dy=-pb\dy; Bullet rebounds
			End If 
		End If 
	
	If pod(i)\status=-1 Then pod(i)\targ=nearest(pod(i)\x,pod(i)\y);locate target if pod changed to lizard.
	End If 
	Next; (bullet)
	
	
	;detects collisions between pods
	;Causes sort of elastic collisons
	For j=i To npods
	If j<>i And ImagesCollide(im_circs,pod(i)\x,pod(i)\y,0,im_circs,pod(j)\x,pod(j)\y,0) Then
    a1=pod(i)\dx
	a2=pod(j)\dx
	b1=pod(i)\dy
	b2=pod(j)\dy
		;If a1=0 And a1=a2=b1=b2 Then ; forces pods apart if both stationary
		;a2=1
		;pod(i)\x=pod(i)\x+frame#*3
		;Color 255,244,0
		;End If 		
	pod(j)\dx=a1
	pod(i)\dx=a2
	pod(j)\dy=b1
	pod(i)\dy=b2
	PlaySound sn_reb
	End If 
	Next ;(j)

Next; (i)

End Function

;Calculates component of velocity so object moves towards target
Function homein(x1,x2)
dx=x1-x2
If dx<0 Then z=1 Else z=-1
Return z
End Function


Function set_bem()
;Sets the numbers of the three types of BEM in each level (n1,n2,n3)

;Generates numbers of diferent types of bems
;depending on the level number. However, when
;maximum size of the array is reached (maxbem) then generate
;a random mixture without increasing the numbers.
If level<maxbem Then 
	If level Mod(3)=0 Then n2=level/3
	If level Mod(2)=0 Then n3=level/3
	n1=level-n2-(n3*2)
	If n1<0 Then n1=0
Else 
n3=Rnd(8)
n2=Rnd(8)
n1=maxbem-(n2+n3)
End If 

nbem=n1+n2+n3-1; Number of BEMs counting from 0

make_bem(0,n1-1,1)
make_bem(n1,n1+n2-1,2)
make_bem(n2+n1,n1+n2+n3-1,3)
End Function 

Function make_bem(i1,i2,tp)
For i=i1 To i2
bem.fly(i)=New fly

;set x and y starting coordinates but ensure they do not lie in the clear zone
bem(i)\tp=tp
Repeat 
bem(i)\x=Rnd(H(0),H(20))
bem(i)\y=Rnd(V(0),V(20))
Until bem(i)\x>H(18) Or bem(i)\x<H(2) Or bem(i)\y>V(18) Or bem(i)\y<V(2)
bem(i)\t=50
bem(i)\sp=bem_sp
Repeat
bem(i)\dx=Rnd(-1,1)
bem(i)\dy=Rnd(-1,1)
Until bem(i)\dx<>0 Or bem(i)\dy<>0
Next
End Function


Function update_bem()
bemcount=0

;advance animation frame
If frame_advance=True Then 
bframe=bframe+1 
If bframe=8 Then bframe=0
End If  

For i=0 To nbem
;If BEM alive do stuff
If bem(i)\tp<>0 Then 
	bemcount=bemcount+1

	;Text bem(i)\x,bem(i)\y,i

	;confine to screen
	bem(i)\dx=confine(bem(i)\x,bem(i)\dx,bemxmin,bemxmax)
	bem(i)\dy=confine(bem(i)\y,bem(i)\dy,bemymin,bemymax)

	;Update location
	bem(i)\x=bem(i)\x+bem(i)\dx
	bem(i)\y=bem(i)\y+bem(i)\dy

	;Choose image and then draw it
	
	Select bem(i)\tp
	Case 1
	im_bem=im_bem1
	Case 2
	im_bem=im_bem2
	Case 3 
	im_bem=im_bem3
	End Select
	
	DrawImage im_bem,bem(i)\x,bem(i)\y,bframe 

	;Caused bem to change direction when timer=0	
	bem(i)\t=bem(i)\t-1
	If bem(i)\t=0 Then
	
	Select bem(i)\tp

	Case 1
	bem(i)\t=30+Rnd(60)
	Repeat
	bem(i)\dx=Rnd(-1,1)
	bem(i)\dy=Rnd(-1,1)
	Until bem(i)\dx<>0 Or bem(i)\dy<>0
	
	Case 2
	bem(i)\t=30+Rnd(60)
	Repeat
	bem(i)\dx=Rnd(-1,1)
	bem(i)\dy=Rnd(-1,1)
	Until bem(i)\dx<>0 Or bem(i)\dy<>0

	Case 3
	bem(i)\t=10+Rnd(50)
	bem(i)\dx= 1*(bem(i)\x<player_x#)-1*(bem(i)\x>=player_x#)
	bem(i)\dy= 1*(bem(i)\y<player_y#)-1*(bem(i)\y>=player_y#)

	End Select 
	End If
	
	;Hack that causes BEMS to move away from centre of screen if
	;player is awaiting rebirth. Prevents imediate collision with new ship.
	If player_status=-1 Then bem(i)\dx=(1*bem(i)\x>midx)-(1*bem(i)\x<=midx)

	;Random chace of shooting at player
	If Rnd(1,1000)<bem(i)\sp Then
	pb.bullet=New bullet
	pb\x=bem(i)\x
	pb\y=bem(i)\y

	x=0.5*dist(player_x,player_y,bem(i)\x,bem(i)\y)
	pb\dx#=(player_x-bem(i)\x)/x
	pb\dy#=(player_y-bem(i)\y)/x

	pb\life#=width
	pb\fw=2
	End If

	;Collision detection between bullet and BEM
	For pb.bullet = Each bullet
	If ImagesCollide(im_bem,bem(i)\x,bem(i)\y,0,im_bull1,pb\x,pb\y,0) Then 
		If pb\fw=1 And bem(i)\tp=1 Then ;If the bullet is from the player and the BEM is type 1 then kill it. 
		score=score+1				;Increase score
		bem(i)\tp=0					;Changes status to dead
		bem(i)\sp=0					;stops it shooting
		bem_explode(bem(i)\x,bem(i)\y); make explosion 
		bem(i)\dx=-100					;moves it off the edge of the screen
		bem(i)\dy=-100
		pb\life#=0 						;removes the bullet
		Else pb\dx=-pb\dx:pb\dy=-pb\dy: ; else rebound the bullet.
		If pb\fw=1 PlaySound sn_bip
		End If 
	End If 
	Next
	
	;collision detection between player and BEM
	If ImagesCollide(im_bem,bem(i)\x,bem(i)\y,0,playership(player_o),player_x#,player_y#,0)Then
	player_status=0; Kill player
	End If 

	;Collision detection between pod and Bem
	For j=0 To npods
	If ImagesCollide(im_bem,bem(i)\x,bem(i)\y,0,im_liz,pod(j)\x,pod(j)\y,0) Then 
		;Kill BEM if Pod is chaser
		If pod(j)\status=-1 Then
		score=score+bem(i)\tp;Increase score
		bem_explode(bem(i)\x,bem(i)\y); make explosion
		bem(i)\tp=0;Changes BEM status to dead	
		bem(i)\sp=0;stops BEM from shooting
		pod(j)\status=1
		End If  

		;Rebound BEM if Pod is egg 
		If pod(j)\status=1 Then
		bem(i)\dx=-bem(i)\dx 
		bem(i)\dy=-bem(i)\dy
		bem(i)\t=30+Rnd(50)
		End If 
	End If 
	Next; (j)

End If ;(From if bem\tp<>0. ie if not dead)

Next; (i)
End Function  

;#######################
;# Explosion Functions #
;#######################

Function bem_explode(x,y)
PlaySound sn_exp
bang(x,y,0,2,2,50,1,0)
bang(x,y,0,2,2,50,-4,0)
bang(x,y,0,2,2,50,-12,0)
End Function 

Function bang(x,y,o,dx,dy,max,count,col)
zob.zob=New zob
zob\count=count 
zob\max=max
zob\col=col
zob\x1=x
zob\y1=y-o
zob\x2=x+o
zob\y2=y
zob\x3=x
zob\y3=y+o
zob\x4=x-o
zob\y4=y
zob\dx=dx
zob\dy=dy
End Function 


Function plotsqr() 
For zob.zob = Each zob

Local col=256-zob\count*2

Select zob\col

Case 1
Color col,col,col
Case 2
Color 0,0,col
Case 3
Color col,col,0
Case 4
Color 0,col,0
Case 5
Color 0,col,col
Case 6
Color 0,0,col
Case 7
Color col,0,col
Case 8
Color col,0,0
Case 9
Color 0,0,0
Default 
Color 0,col,200
End Select 

Line zob\x1,zob\y1,zob\x2,zob\y2
Line zob\x2,zob\y2,zob\x3,zob\y3
Line zob\x3,zob\y3,zob\x4,zob\y4
Line zob\x4,zob\y4,zob\x1,zob\y1
If zob\count>0
zob\y1=zob\y1-zob\dy
zob\x2=zob\x2+zob\dx
zob\y3=zob\y3+zob\dy
zob\x4=zob\x4-zob\dx
End If 
zob\count=zob\count+1
If zob\count>zob\max Then Delete zob
Next
End Function 



;###########################
;#General Perpose Fuctions #
;###########################

;Generates rotated ship image and creates sin/cos lut
Function Rotate() 
For loop=0 To rots-1
angle=loop*360/rots
playership(loop)=CopyImage(im_ship)
RotateImage playership(loop),angle
trig#(loop,0)=Sin(angle)
trig#(loop,1)=Cos(angle)
;Print loop+" / " + (rots-1) +" Angle, " +angle +" Sin, " +trig#(loop,0) +" Cos, " +trig#(loop,1)
Next

;For loop=o To rots-1
;dx=200*trig#(loop,0)
;dy=200*trig#(loop,1)
;Line midx,midy,midx+dx,midy+dy
;Text midx+dx,midy+dy,loop
;Next
;Flip
;WaitKey

End Function 

Function confine(x,dx,min,max)
If x<min And dx<0 Then dx=-dx
If x>max And dx>0 Then dx=-dx
Return dx
End Function

;Determines nearest object (either ship or fly)
Function nearest(x,y)

;Assumes player is nearest and sets target to player
target=-1
sep=dist(x,y,player_x,player_y)


;Checks to see if any of the alive bems are closer than the player
For i=0 To nbem
j=dist(x,y,bem(i)\x,bem(i)\y)
If j<sep And bem(i)\tp<>0 Then
sep=j 
target=i
End If 
Next

Return target
End Function

;Calculates distance between two points
Function dist(x1,y1,x2,y2)
dx=x1-x2
dy=y1-y2
dist=Sqr(dx*dx+dy*dy)
Return dist 
End Function

Function clearup()
FlushKeys
;clear expanding diamondthings
For zob.zob=Each zob
Delete zob
Next
;clear bullets 
For pb.bullet = Each bullet
Delete pb
Next
End Function 


Function update_display()

Color 255,255-loopcount,loopcount

;Draw frame around edge of screen
Line 0,0,width1,0
Line width1,0,width1,height1
Line width1,height1,0,height1
Line 0,height1,0,0

Text v(1),h(0),"Level:"+level
Text v(5),h(0),"Score:"+score
Text v(10),h(0),"Lives:"+lives
Rect v(15),h(0),4*(pbmax-pbcount),18

End Function

;Welcome screen 
Function greet()

;Play music

chn_mus=PlayMusic ("Data\EQUINOXE.MID")

Local x,y,dx,dy,countdown,col
Local dc=1; text colour change
x=midx:y=midy ;Coordinates of primary moving shape
dx=4:dy=4
countdown=120   ; Timer for change in direction of moving shape
c=9            ; colour index for shapes
mess=0; Message type (cycles through high scores and instructions)

Repeat
Cls

Color col,col,col; set text colour
SetFont fnt_txt
Select mess

Case 0
Text midx,V(5),"Pods",1,1
SetFont fnt_sm
Text midx,V(6),"A game by Alan Maydwell",1,1
Text midx,V(7),"Based on the BBC Micro game Tetrapods",1,1
Text midx,V(8),"Sound effects taken from Star Control games",1,1
Text midx,V(9),"Music by J M Jarre and Richard Straus",1,1
SetFont fnt_txt


Case 1
Text midx,V(5),"Controls",1,1
Text midx,V(7),"Z - Rotate left",1,1
Text midx,V(8),"X - Rotate Right",1,1
Text midx,V(9),"Left-shift - Accelerate",1,1
Text midx,V(10),"Return - Fire",1,1
Text midx,V(12),"or use a joystick",1,1
Text midx,V(14),"Esc - Quit",1,1
Text midx,V(16),"PRESS SPACE OR FIRE TO START",1,1

Case 2
Text midx,V(16),"PRESS SPACE OR FIRE TO START",1,1
Text midx,V(5),"HIGH SCORES",1,1
For loop=0 To ns
Text v(8),V(loop+6),hst(loop)+"   "+hsnames$(loop),0,1
Next
Text midx,V(16),"PRESS SPACE OR FIRE TO START",1,1
End Select 

col=col+dc ;change text colour

If col=255 Or col=0 Then 
If col=0 And dc=-1 Then mess=(mess+1) Mod (3)

dc=-dc; change direction of colour change
End If 

;Set new velocities of shapes if countdown reaches 0
If countdown<=0
Repeat
dx=Rnd(-8,8)
dy=Rnd(-8,8)
Until dx<>0 Or dy<>0
countdown=30+Rnd(0,100)
c=Rnd(0,8)
End If 

;If countdown Mod(2)=0 Then 
bang(x,y,0,-1,-1,128,0,c)
bang(width-x,y,0,-1,-1,128,0,c)
bang(x,height-y,0,-1,-1,128,0,c)
bang(width-x,height-y,0,-1,-1,128,0,c)
;End If 


plotsqr()

dx=confine(x,dx,0,width)
dy=confine(y,dy,0,height)

x=x+dx:y=y+dy
countdown=countdown-1
If KeyDown(1) End 
If KeyDown(24) options; Go to options screen if O pressed.
Flip 
Until KeyDown(1) Or KeyDown(57) Or GetJoy()>0

StopChannel chn_mus
score=0
player_status=1
lives=startlives
level=startlevel

End Function

;Materialise stuff at start of level
Function materialise()
Local s=H(3); size of zaps

;create zaps centred on pods
For i=0 To npods
bang(pod(i)\x,pod(i)\y,s,-1,-1,s,0,2)
bang(pod(i)\x,pod(i)\y,s,-1,-1,s,-4,2)
Next 

;Create zap centred on player
bang(player_x#,player_y#,s,-1,-1,s,0,1)
bang(player_x#,player_y#,s,-1,-1,s,-4,1)
;Make noise
PlaySound(sn_mat)

;create zaps centred on bems
For i=0 To nbem
bang(bem(i)\x,bem(i)\y,s,-1,-1,s,0,8)
bang(bem(i)\x,bem(i)\y,s,-1,-1,s,-4,8)
bang(bem(i)\x,bem(i)\y,s,-1,-1,s,-8,8)
Next

;Cycle through zaps for a bit
For loop=0 To s
Cls
update_display
plotsqr
Flip 
Next

Color 255,255,255
Rect 0,0,width,height
Flip 

End Function 



;Dematerialisation of  Pods at end of level
Function level_end()
countdown=0; clears rebirth countdown
;delete bullets
For pb.bullet = Each bullet
Delete pb
Next 


Local size=H(3)

;Create zap centred on player
bang(player_x#,player_y#,size,-2,-2,size/2,0,1)
bang(player_x#,player_y#,size,-2,-2,size/2,-4,1)

;create zaps centred on pods
For i=0 To npods
bang(pod(i)\x,pod(i)\y,size/2,-2,-2,size/2,0,2)
Next 

;Update zaps for a while until counter reaches maximum value
Local counter=0
Repeat
Cls
plotsqr()
update_display
Flip 
counter=counter+1
Until counter>size Or KeyDown(1) 

End Function 

Function game_over()
clearup()
SetFont fnt_txt
Text midx,midy,"Game Over"
update_highscores(score)
End Function 

;Sets initial dummy values for high score table
Function sethighscore(ns)
For loop=0 To ns
hst(loop)=0
hsnames$(loop)="wormer"
Next
End Function

;Places new score in High Score Table if value is high enough
Function update_highscores(score)

;Checks high score table to see if the new score should be included.
;If new score is to be included its position in table is stored in np.
;-1 value of np is used to signify that score should not be added because it is too low.

np=-1 
pcount=0
Repeat
If score>=hst(pcount) Then np=pcount
pcount=pcount+1 
Until np<>-1 Or pcount>ns


;If new score to be inclued, existing entries from bottom of table to np are moved down one place.
;Except when new score is to be added to the final position (not necessary in such a case).
If np<>-1 And  np<>ns Then 
For loop=ns To np+1 Step -1
hst(loop)=hst(loop-1)
hsnames$(loop)=hsnames$(loop-1)
Next
End If 

If np<>-1 Then 
;adds new score to high score table at position np. 
hst(np)=score
;requests player's name name and stores it in table.
hsnames$(np)=inputname$(np)
End If
End Function

Function inputname$(np)
a$=""
Color 255,255,255
chn_mus=PlayMusic("Data\asz.mid")
Repeat 
Cls 

x=Rnd(0,width)
y=Rnd(0,height)
c=Rnd(0,8)
bang(x,y,0,1,1,H(2),0,c)
plotsqr
SetFont fnt_txt

Color 255,0,100
Text midx,V(6),"Congratulations!",1,1
Color 255,200,0
Text midx,V(7),"Your score of "+score,1,1
Color 220,220,0
Text midx,V(8),"has placed you at position "+(np+1),1,1
Color 0,255,100
Text midx,V(9),"in the High Score Table",1,1
Color 100,0,220
Text midx,V(11),"Please type your name:",1,1

; Checks for keypress and adds corresponding key to the string 
; if it is not blank or backspace or return and string has not 
; reached maximum value..
temp=GetKey()
If temp>0 And temp<>13 And temp<>8 And Len(a$)<17 Then a$=a$+Chr$(temp)

;Deletes character from string if Backspace pressed.
If temp=8 And Len(a$)>0 Then 
l=Len(a$)-1
a$=Left$(a$,l)End If

Color 255,255,255 
Text midx,V(13),"(  "+a$+"  )",1,1 

Flip
If KeyDown(1) End;quit if escape pressed

Until temp=13 Or KeyDown(1); Ends when return key pressed

If a$="" Then a$="anon"
Return a$
End Function


;Options Screen
Function options()
sel=1	; Current position in list
selmin=1; Min position in list
selmax=6; Max position in list

Local hb=V(1); Hight of highlight bar

Repeat
Cls
Color 0,255,255
Text midx,H(3),"Use cursor keys to select and change values",True,True 
;Moves position in list up or down if up or down arrow pressed
If (KeyHit(200) Or JoyYDir()=-1) And sel>selmin Then sel=sel-1
If (KeyHit(208) Or JoyYDir()=1) And sel<selmax Then sel=sel+1

;Highlights currently selected item and allows 
;associated parameter to be adjusted by calling
;Function change_val
Color 200,0,255
Select sel
Case 1
Rect 0,V(5),width,hb
startlives=change_val(startlives,0,20,1) 
Case 2
Rect 0,V(7),width,hb
pbmax=change_val(pbmax,1,30,1) 
Case 3
Rect 0,V(9),width,hb
bem_sp=change_val(bem_sp,0,40,1) 
Case 4
Rect 0,V(11),width,hb
startlevel=change_val(startlevel,1,50,1)
Case 5
Rect 0,V(13),width,hb
slowdown=change_val(slowdown,0,100,5)
Case 6
Rect 0,V(15),width,hb
npods=change_val(npods,0,maxpods,1)
End Select 


Color 255,255,255
Text midx,V(1),"O P T I O N S",1,0

;Display text 
Color 255,255,0
Text midx,V(5),"Lives: "+startlives,1,0
Text midx,V(7),"Maximum Player Shots: "+pbmax,1,0
Text midx,V(9),"Baddie Shot Frequency: "+bem_sp,1,0
Text midx,V(11),"Starting Level: "+startlevel,1,0
Text midx,V(13),"Speed reduction: "+slowdown,1,0
Text midx,V(15),"Number of pods: "+(npods+1),1,0
Color 255,255,255
Text midx,V(17),"Press Space or Fire to Exit",1,0
Flip
Until KeyDown(1) Or KeyDown(57) Or GetJoy()>0
FlushKeys
Delay 150
FlushKeys 
End Function  



;Increases or decreases value when right or left arrow key pressed
;and if value does not exceed max or min.
;(Used by options screen)
Function change_val(temp,min,max,delta)
If KeyHit(203) Or JoyXDir()=-1  And temp>min Then temp=temp-delta
If KeyHit(205) Or JoyXDir()=1 And temp<max Then temp=temp+delta
Return temp 
End Function 